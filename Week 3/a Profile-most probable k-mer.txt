Given a profile matrix Profile, we can compute the probability of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been generated by Profile among all k-mers in Text. For the NF-?B profile matrix, "ACGGGGATTACC" is the Profile-most probable 12-mer in "ggtACGGGGATTACCt". Indeed, every other 12-mer in this string has probability 0. In general, if there are multiple Profile-most probable k-mers in Text, then we select the first such k-mer occurring in Text.

Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.
 Input: A string Text, an integer k, and a 4 x k matrix Profile.
 Output: A Profile-most probable k-mer in Text.

Code Challenge (3 points): Solve the Profile-most Probable k-mer Problem by writing a function ProfileMostProbablePattern(Text, k, Profile). (Hint: make sure to use the function Pr(Text, Profile) as a subroutine.)

Click here to download this problem's test datasets.

Sample Input:

ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
5
0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2
Sample Output:

CCGAG





Code  : 


# Insert your Pr(text, profile) function here from Motifs.py.
def Pr(Text, Profile):
    i=0
    p=1
    for char in Text:
        p=p*Profile[char][i]
        i=i+1
    return p
# Write your ProfileMostProbableKmer() function here.
# The profile matrix assumes that the first row corresponds to A, the second corresponds to C,
# the third corresponds to G, and the fourth corresponds to T.
# You should represent the profile matrix as a dictionary whose keys are 'A', 'C', 'G', and 'T' and whose values are lists of floats
def ProfileMostProbableKmer(Text, k, profile):
    max=Pr(Text[0:k],profile)
    ms=Text[0:k]
    for i in range(len(Text)-k+1):
        if Pr(Text[i:i+k],profile)>max:
            max=Pr(Text[i:i+k],profile)
            ms=Text[i:i+k]
    return ms